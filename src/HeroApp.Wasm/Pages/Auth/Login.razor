@page "/auth/login"
@layout AuthLayout

@using AppShared.Authentication.Authenticate
@inject IHttpService  authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider  authenticationStateProvider

<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Username"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>


@code {

    Command model = new Command();

    bool isBusy = false;
    string message = string.Empty;
    AlertMessage.AlertMessageType messageType = AlertMessage.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.Post<Domain.ApiResponse<Result>>(model);
        if (result.Succeeded)
        {
            var userInfo = new AppShared.Model.LocalUserInfo()
            {
                AccessToken = result.Result.AccessToken,
                Id = result.Result.UserName,
            };

            await storageService.SetItemAsync(Constants.UserKey, userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = AlertMessage.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}